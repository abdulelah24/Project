apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'

buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
	}
}

configurations {
	shadowed
}

dependencies {
	shadowed(project(':junit-platform-launcher'))
	shadowed(project(':junit-jupiter-engine'))
	shadowed(project(':junit-vintage-engine'))
	shadowed('net.sf.jopt-simple:jopt-simple:5.0.3')
}

sourceSets.main.compileClasspath += configurations.shadowed

eclipse {
	classpath {
		plusConfigurations += [ configurations.shadowed ]
	}
}

idea {
	module {
		scopes.PROVIDED.plus += [ configurations.shadowed ]
	}
}

jar {
	manifest {
		attributes(
			'Main-Class': 'org.junit.platform.console.ConsoleLauncher',
			// generate test engine information in single shared manifest file
			'Engine-ArtifactID-junit-jupiter': 'junit-jupiter-engine',
			'Engine-Version-junit-jupiter': "$rootProject.version",
			'Engine-ArtifactID-junit-vintage': 'junit-vintage-engine',
			'Engine-Version-junit-vintage': "$vintageVersion"
		)
	}
}

javadoc {
	classpath = project.sourceSets.main.compileClasspath + configurations.shadowed
}

jar.enabled = false

shadowJar {
	baseName = 'junit-console'
	version = "$rootProject.version"
	classifier = 'standalone'
	configurations = [project.configurations.shadowed]
	mergeServiceFiles()
	relocate 'joptsimple', 'org.junit.platform.joptsimple'
	transform(org.junit.platform.gradle.plugins.shadow.transformers.PropertiesFileTransformer) {
		paths = [
			'joptsimple/ExceptionMessages.properties',
			'joptsimple/HelpFormatterMessages.properties'
		]
		keyTransformer = { key ->
			key.replaceAll('^(joptsimple\\..*)$', 'org.junit.platform.$1')
		}
	}
}

artifacts {
	archives shadowJar
}

task runStandaloneConsole(type: JavaExec) {
	workingDir "$buildDir/libs"
	main = '-jar'
	args = [
		"$shadowJar.archiveName",
		'--scan-classpath',
		'--details', 'none'
	]
	standardOutput = new ByteArrayOutputStream()
	errorOutput = new ByteArrayOutputStream()
}

task checkStandaloneConsole {
	doLast {
		String text = runStandaloneConsole.errorOutput.toString() + runStandaloneConsole.standardOutput.toString()
		assert text.contains("junit-jupiter (group ID: org.junit.jupiter, artifact ID: junit-jupiter-engine, version: $rootProject.version)")
		assert text.contains("junit-vintage (group ID: org.junit.vintage, artifact ID: junit-vintage-engine, version: $vintageVersion)")
	}
}

runStandaloneConsole.dependsOn(shadowJar)
checkStandaloneConsole.dependsOn(runStandaloneConsole)
check.dependsOn(checkStandaloneConsole)
