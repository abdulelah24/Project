apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'

buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.4'
	}
}

configurations {
	shadowed
	standalone
}

dependencies {
	compile(project(':junit-platform-launcher'))
	shadowed('net.sf.jopt-simple:jopt-simple:5.0.3')

	standalone(project(':junit-platform-console'))
	standalone(project(':junit-jupiter-engine'))
	standalone(project(':junit-vintage-engine'))
}

sourceSets.main.compileClasspath += configurations.shadowed

eclipse {
	classpath {
		plusConfigurations += [ configurations.shadowed ]
	}
}

idea {
	module {
		scopes.PROVIDED.plus += [ configurations.shadowed ]
	}
}

jar {
	manifest {
		attributes(
			'Main-Class': 'org.junit.platform.console.ConsoleLauncher'
		)
	}
}

javadoc {
	classpath = project.sourceSets.main.compileClasspath + configurations.shadowed
}

jar.enabled = false

shadowJar {
	// Generate shadow jar only if the underlying manifest was regenerated.
	// See https://github.com/junit-team/junit5/issues/631
	onlyIf {
		project.generateManifest
	}
	classifier = null
	configurations = [project.configurations.shadowed]
	exclude 'META-INF/**'
	relocate 'joptsimple', 'org.junit.platform.joptsimple'
	transform(org.junit.platform.gradle.plugins.shadow.transformers.PropertiesFileTransformer) {
		paths = [
			'joptsimple/ExceptionMessages.properties',
			'joptsimple/HelpFormatterMessages.properties'
		]
		keyTransformer = { key ->
			key.replaceAll('^(joptsimple\\..*)$', 'org.junit.platform.$1')
		}
	}
}

task standaloneJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
	dependsOn(shadowJar)
	dependsOn(project(":junit-jupiter-engine").jar)
	dependsOn(project(":junit-vintage-engine").jar)

	classifier = 'standalone'
	configurations = [project.configurations.standalone]

	mergeServiceFiles()
	manifest {
		inheritFrom project.tasks.jar.manifest
		attributes(
            'Specification-Title': "$project.name-standalone",
            'Implementation-Title': "$project.name-standalone",
			// generate test engine version information in single shared manifest file
			// pattern of key and value: `'Engine-Version-{YourTestEngine#getId()}': '47.11'`
			'Engine-Version-junit-jupiter': "$rootProject.version",
			'Engine-Version-junit-vintage': "$vintageVersion"
		)
	}
}

artifacts {
	archives shadowJar
	archives standaloneJar
}

task standaloneExec(type: JavaExec) {
	dependsOn(standaloneJar)
	workingDir "$buildDir/libs"
	main = '-jar'
	args = [
			"$standaloneJar.archiveName",
			'--scan-classpath',
			'--details', 'none'
	]
	standardOutput = new ByteArrayOutputStream()
	errorOutput = new ByteArrayOutputStream()
}

task standaloneCheck {
	dependsOn(standaloneExec)
	doLast {
		String text = standaloneExec.errorOutput.toString() + standaloneExec.standardOutput.toString()
		assert text.contains("junit-jupiter (group ID: org.junit.jupiter, artifact ID: junit-jupiter-engine, version: $rootProject.version)")
		assert text.contains("junit-vintage (group ID: org.junit.vintage, artifact ID: junit-vintage-engine, version: $vintageVersion)")
	}
}

check.dependsOn(standaloneCheck)
