apply plugin: 'com.github.johnrengelman.shadow'

description = 'JUnit Jupiter Params'

buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath("com.github.jengelman.gradle.plugins:shadow:${shadowVersion}")
	}
}

test {
	useJUnitPlatform {
		includeEngines 'junit-jupiter'
	}
	filter {
		includeTestsMatching '*Tests'
	}
	systemProperty 'java.util.logging.manager', 'org.apache.logging.log4j.jul.LogManager'
}

afterEvaluate {
	// Use classes modified by shadow plugin for test execution so JaCoCo
	// finds same class files when creating its report
	test.classpath -= sourceSets.main.output
	test.classpath += files(shadowJar.archivePath)
	test.dependsOn(shadowJar)
}

dependencies {
	api(project(':junit-jupiter-api'))

	shadowed('com.univocity:univocity-parsers:2.6.3')

	testRuntime("org.junit.jupiter:junit-jupiter-engine:5.1.0")

	testImplementation("org.assertj:assertj-core:${assertJVersion}")
	testImplementation("org.mockito:mockito-core:${mockitoVersion}")
	testImplementation(project(path: ':junit-platform-engine', configuration: 'testArtifacts'))
	testImplementation(project(':junit-jupiter-engine'))
	testImplementation(project(':junit-platform-launcher'))
	testImplementation(project(':junit-platform-runner'))

	testRuntimeOnly("org.apache.logging.log4j:log4j-core:${log4jVersion}")
	testRuntimeOnly("org.apache.logging.log4j:log4j-jul:${log4jVersion}")

	compileOnly("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
	testImplementation("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
}

jar.enabled = false
jar.dependsOn shadowJar

jar {
	manifest {
		attributes(
			'Automatic-Module-Name': 'org.junit.jupiter.params'
		)
	}
}

shadowJar {
	// Generate shadow jar only if the underlying manifest was regenerated.
	// See https://github.com/junit-team/junit5/issues/631
	onlyIf {
		(project.generateManifest || !shadowJar.archivePath.exists())
	}
	classifier = null
	configurations = [project.configurations.shadowed]
	exclude 'META-INF/**'
	relocate 'com.univocity', 'org.junit.jupiter.params.shadow.com.univocity'
	from(projectDir) {
		include 'LICENSE-univocity-parsers.md'
		into 'META-INF'
	}
}

artifacts {
	archives shadowJar
}
