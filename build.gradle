buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "com.diffplug.gradle.spotless:spotless:1.3.1"
	}
}

subprojects {

	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin: 'maven'
	apply plugin: 'com.diffplug.gradle.spotless'

	repositories {
		mavenCentral()
	}

	compileJava {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
	}

	compileTestJava {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
		options.compilerArgs += '-parameters'
	}

	dependencies {
		compile("org.projectlombok:lombok:${lombokVersion}")
		testCompile("org.assertj:assertj-core:${assertJVersion}")
	}

	eclipse {
		classpath {
			containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
			containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
		}
	}

	test {
		description = 'Runs JUnit unit tests.'
		useJUnit()

		scanForTestClasses = false
		include(["**/*Tests.class", "**/*Test.class"])
		// Since we set scanForTestClasses to false, we need to filter out inner
		// classes with the "$" pattern; otherwise, using -Dtest.single=MyTests to
		// run MyTests by itself will fail if MyTests contains any inner classes.
		exclude(["**/Abstract*.class", '**/*$*'])
	}

	javadoc {
		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = project.name
		options.addStringOption('Xdoclint:none', '-quiet')
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}

	spotless {
		java {
			if (project.name == 'open-test-alliance') {
				licenseHeaderFile rootProject.file('spotless_apache-2.0-header.java')
			} else {
				licenseHeader '\n'
			}
			importOrder(['java', 'javax', 'org', 'com', 'org.junit', 'org.opentestalliance', 'lombok'])
			eclipseFormatFile rootProject.file('spotless_eclipse-java-google-style.xml')

			// You can also tweak the formatting with custom regexes or functions, such as:
			// Eclipse formatter puts excess whitespace after lambda blocks
			//    funcThatTakesLambdas(x -> {} , y -> {} )  // what Eclipse does
			//    funcThatTakesLambdas(x -> {}, y -> {})    // what I wish Eclipse did
			custom 'Lambda fix', { it.replace('} )', '})').replace('} ,', '},') }
		}
	}
}

configure(rootProject) {
	description = 'JUnit Lambda'

	task wrapper(type: Wrapper) {
		gradleVersion = '2.8'
	}

	apply plugin: 'com.diffplug.gradle.spotless'
	spotless {
		format 'misc', {
			target '**/*.gradle', '**/*.md', '**/*.gitignore'
			indentWithTabs()
			trimTrailingWhitespace()
			endWithNewline()
		}
	}
}
