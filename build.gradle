buildscript {
	repositories {
		maven { url 'https://plugins.gradle.org/m2/' }
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
	}
	dependencies {
		classpath 'com.diffplug.gradle.spotless:spotless:1.3.2'
		classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
		classpath 'org.ajoberstar:gradle-git:1.3.2'
		classpath 'org.junit:junit-gradle:5.0.0-SNAPSHOT'
	}
}

subprojects {

	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'idea'
	apply plugin: 'maven'
	apply plugin: 'signing'
	apply plugin: 'com.diffplug.gradle.spotless'
	apply plugin: 'checkstyle'

	repositories {
		mavenCentral()
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
	}

	compileJava {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
	}

	compileTestJava {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
		options.compilerArgs += '-parameters'
	}

	checkstyle {
		toolVersion = 6.11
		configFile = rootProject.file('src/checkstyle/checkstyle.xml')
	}

	eclipse {
		classpath {
			containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
			containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
		}
	}

	test {
		description = 'Runs JUnit tests.'
		useJUnit()

		systemProperty 'java.util.logging.manager', 'org.apache.logging.log4j.jul.LogManager'
		systemProperty 'org.apache.logging.log4j.level', 'ERROR'
		systemProperty 'org.apache.logging.log4j.simplelog.StatusLogger.level', 'OFF'

		scanForTestClasses = true //Necessary to filter out JUnit5 test classes
		include(['**/*Tests.class', '**/*Test.class'])
		exclude(['**/*$*', '**/AllFastJUnit5Tests.class'])
	}

	javadoc {
		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = project.name
		options.addStringOption('Xdoclint:none', '-quiet')
		exclude '**/com/example/**'
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}

	spotless {
		java {
			licenseHeaderFile rootProject.file('src/spotless/eclipse-public-license-1.0.java')
			importOrder(['java', 'javax', 'com', 'org'])
			eclipseFormatFile rootProject.file('src/eclipse/junit-lambda-eclipse-formatter-settings.xml')
			trimTrailingWhitespace()
			// endWithNewline()

			custom 'Lambda fix', { it.replace('} )', '})').replace('} ,', '},') }
		}

		format 'groovy', {
			target '**/*.groovy'
			licenseHeaderFile rootProject.file('src/spotless/eclipse-public-license-1.0.java'), "package "
		}
	}

	def signArtifacts = !project.version.contains('SNAPSHOT')

	if (signArtifacts) {
		signing {
			sign configurations.archives
		}
	}

	uploadArchives {

		dependsOn check

		repositories {
			mavenDeployer {

				if (signArtifacts) {
					beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
				}

				def ossrhUsername = rootProject.hasProperty('ossrhUsername') ? rootProject.ossrhUsername : ''
				def ossrhPassword = rootProject.hasProperty('ossrhPassword') ? rootProject.ossrhPassword : ''

				repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}

				snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}

				pom.project {
					name "${project.group}:${project.name}"
					packaging 'jar'
					description "Module \"${project.name}\" of the prototype for the next generation of JUnit, codenamed \"JUnit Lambda\"."
					url 'http://junit.org/junit-lambda.html'

					scm {
						connection 'scm:git:git://github.com/junit-team/junit-lambda.git'
						developerConnection 'scm:git:git://github.com/junit-team/junit-lambda.git'
						url 'https://github.com/junit-team/junit-lambda'
					}

					licenses {
						license {
							name 'Eclipse Public License v1.0'
							url 'http://www.eclipse.org/legal/epl-v10.html'
						}
					}

					developers {
						developer {
							id 'bechte'
							name 'Stefan Bechtold'
							email 'stefan.bechtold@me.com'
						}
						developer {
							id 'jlink'
							name 'Johannes Link'
							email 'business@johanneslink.net'
						}
						developer {
							id 'marcphilipp'
							name 'Marc Philipp'
							email 'mail@marcphilipp.de'
						}
						developer {
							id 'mmerdes'
							name 'Matthias Merdes'
							email 'Matthias.Merdes@heidelberg-mobil.com'
						}
						developer {
							id 'sbrannen'
							name 'Sam Brannen'
							email 'sam@sambrannen.com'
						}
					}
				}
			}
		}
	}

}

configure(rootProject) {
	description = 'JUnit Lambda'

	apply plugin: 'com.diffplug.gradle.spotless'

	task aggregateJavadocs(type: Javadoc) {
		group = "Documentation"
		description = "Generates aggregated Javadocs"
		title = "${rootProject.description} ${version} API"

		dependsOn {
			subprojects.collect {
				it.tasks.getByName("jar")
			}
		}

		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = rootProject.description
		options.splitIndex = true
		options.addStringOption('Xdoclint:none', '-quiet')
		exclude '**/com/example/**'

		source subprojects.collect { project ->
			project.sourceSets.main.allJava
		}

		maxMemory = "1024m"
		destinationDir = new File(buildDir, "docs/javadoc")

		doFirst {
			classpath = files(subprojects.collect { it.sourceSets.main.compileClasspath })
		}
	}

	spotless {
		format 'misc', {
			target '**/*.gradle', '**/*.md', '**/*.gitignore'
			indentWithTabs()
			trimTrailingWhitespace()
			endWithNewline()
		}
	}

	task wrapper(type: Wrapper) {
		distributionUrl = 'https://services.gradle.org/distributions/gradle-2.10-all.zip'
	}

}
